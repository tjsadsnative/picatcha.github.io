/*!
 * Socialite v2.1
 * http://socialitejs.com
 * Copyright (c) 2011 David Bushell
 * Dual-licensed under the BSD or MIT licenses: http://socialitejs.com/license.txt
 *
 * Since v2.1 - Hau Vong
 *    Add support to new face book share button
 */
window.Socialite = (function(window, document, undefined)
{
	'use strict';

	var uid = 0,
		instances = [],
		networks = {},
		widgets = {},
		rstate = /^($|loaded|complete)/,
		euc = window.encodeURIComponent;

	var socialite = {
		settings: {},
		trim: function(str)
		{
			return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
		},
		hasClass: function(el, cn)
		{
			return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
		},
		addClass: function(el, cn)
		{
			if (!socialite.hasClass(el, cn)) {
				el.className = (el.className === '') ? cn : el.className + ' ' + cn;
			}
		},
		removeClass: function(el, cn)
		{
			el.className = socialite.trim(' ' + el.className + ' '.replace(' ' + cn + ' ', ' '));
		},
		/**
		 * Copy properties of one object to another
		 */
		extendObject: function(to, from, overwrite)
		{
			for (var prop in from) {
				var hasProp = to[prop] !== undefined;
				if (hasProp && typeof from[prop] === 'object') {
					socialite.extendObject(to[prop], from[prop], overwrite);
				} else if (overwrite || !hasProp) {
					to[prop] = from[prop];
				}
			}
		},
		/**
		 * Return elements with a specific class
		 *
		 * @param context - containing element to search within
		 * @param cn      - class name to search for
		 *
		 */
		getElements: function(context, cn)
		{
			// copy to a new array to avoid a live NodeList
			var i = 0,
					el = [],
					gcn = !!context.getElementsByClassName,
					all = gcn ? context.getElementsByClassName(cn) : context.getElementsByTagName('*');
			for (; i < all.length; i++) {
				if (gcn || socialite.hasClass(all[i], cn)) {
					el.push(all[i]);
				}
			}
			return el;
		},
		/**
		 * Return data-* attributes of element as a query string (or object)
		 *
		 * @param el       - the element
		 * @param noprefix - (optional) if true, remove "data-" from attribute names
		 * @param nostr    - (optional) if true, return attributes in an object
		 *
		 */
		getDataAttributes: function(el, noprefix, nostr)
		{
			var i = 0,
					str = '',
					obj = {},
					attr = el.attributes;
			for (; i < attr.length; i++) {
				var key = attr[i].name,
						  val = attr[i].value;
				if (val.length && key.indexOf('data-') === 0) {
					if (noprefix) {
						key = key.substring(5);
					}
					if (nostr) {
						obj[key] = val;
					} else {
						str += euc(key) + '=' + euc(val) + '&';
					}
				}
			}
			return nostr ? obj : str;
		},
		/**
		 * Copy data-* attributes from one element to another
		 *
		 * @param from     - element to copy from
		 * @param to       - element to copy to
		 * @param noprefix - (optional) if true, remove "data-" from attribute names
		 * @param nohyphen - (optional) if true, convert hyphens to underscores in the attribute names
		 *
		 */
		copyDataAttributes: function(from, to, noprefix, nohyphen)
		{
			// `nohyphen` was needed for Facebook's <fb:like> elements - remove as no longer used?
			var attr = socialite.getDataAttributes(from, noprefix, true);
			for (var i in attr) {
				to.setAttribute(nohyphen ? i.replace(/-/g, '_') : i, attr[i]);
			}
		},
		/**
		 * Create iframe element
		 *
		 * @param src      - iframe URL (src attribute)
		 * @param instance - (optional) socialite instance to activate on iframe load
		 *
		 */
		createIframe: function(src, instance)
		{
			// Socialite v2 has slashed the amount of manual iframe creation, we should aim to avoid this entirely
			var iframe = document.createElement('iframe');
			iframe.style.cssText = 'overflow: hidden; border: none;';
			socialite.extendObject(iframe, {src: src, allowtransparency: 'true', frameborder: '0', scrolling: 'no'}, true);
			if (instance) {
				iframe.onload = iframe.onreadystatechange = function()
				{
					if (rstate.test(iframe.readyState || '')) {
						iframe.onload = iframe.onreadystatechange = null;
						socialite.activateInstance(instance);
					}
				};
			}
			return iframe;
		},
		/**
		 * Returns true if network script has loaded
		 */
		networkReady: function(name)
		{
			return networks[name] ? networks[name].loaded : undefined;
		},
		/**
		 * Append network script to the document
		 */
		appendNetwork: function(network)
		{
			// the activation process is getting a little confusing for some networks
			// it would appear a script load event does not mean its global object exists yet
			// therefore the first call to `activateAll` may have no effect whereas the second call does, e.g. via `window.twttr.ready`

			if (!network || network.appended) {
				return;
			}
			// `network.append` and `network.onload` can cancel progress
			if (typeof network.append === 'function' && network.append(network) === false) {
				network.appended = network.loaded = true;
				socialite.activateAll(network);
				return;
			}

			if (network.script) {
				network.el = document.createElement('script');
				socialite.extendObject(network.el, network.script, true);
				network.el.async = true;
				network.el.onload = network.el.onreadystatechange = function()
				{
					if (rstate.test(network.el.readyState || '')) {
						network.el.onload = network.el.onreadystatechange = null;
						network.loaded = true;
						if (typeof network.onload === 'function' && network.onload(network) === false) {
							return;
						}
						socialite.activateAll(network);
					}
				};
				document.body.appendChild(network.el);
			}
			network.appended = true;
		},
		/**
		 * Remove network script from the document
		 */
		removeNetwork: function(network)
		{
			if (!socialite.networkReady(network.name)) {
				return false;
			}
			if (network.el.parentNode) {
				network.el.parentNode.removeChild(network.el);
			}
			return !(network.appended = network.loaded = false);
		},
		/**
		 * Remove and re-append network script to the document
		 */
		reloadNetwork: function(name)
		{
			// This is a last-ditch effort for half-baked scripts
			var network = networks[name];
			if (network && socialite.removeNetwork(network)) {
				socialite.appendNetwork(network);
			}
		},
		/**
		 * Create new Socialite instance
		 *
		 * @param el     - parent element that will hold the new instance
		 * @param widget - widget the instance belongs to
		 *
		 */
		createInstance: function(el, widget)
		{
			var proceed = true,
					  instance = {
				el: el,
				uid: uid++,
				widget: widget
			};
			instances.push(instance);
			if (widget.process !== undefined) {
				proceed = (typeof widget.process === 'function') ? widget.process(instance) : false;
			}
			if (proceed) {
				socialite.processInstance(instance);
			}
			instance.el.setAttribute('data-socialite', instance.uid);
			instance.el.className = 'socialite ' + widget.name + ' socialite-instance';
			return instance;
		},
		/**
		 * Process a socialite instance to an intermediate state prior to load
		 */
		processInstance: function(instance)
		{
			var el = instance.el;
			instance.el = document.createElement('div');
			instance.el.className = el.className;
			socialite.copyDataAttributes(el, instance.el);
			// stop over-zealous scripts from activating all instances
			if (el.nodeName.toLowerCase() === 'a' && !el.getAttribute('data-default-href')) {
				instance.el.setAttribute('data-default-href', el.getAttribute('href'));
			}
			var parent = el.parentNode;
			parent.insertBefore(instance.el, el);
			parent.removeChild(el);
		},
		/**
		 * Activate a socialite instance
		 */
		activateInstance: function(instance)
		{
			if (instance && !instance.loaded) {
				instance.loaded = true;
				if (typeof instance.widget.activate === 'function') {
					instance.widget.activate(instance);
				}
				socialite.addClass(instance.el, 'socialite-loaded');
				return instance.onload ? instance.onload(instance.el) : null;
			}
		},
		/**
		 * Activate all socialite instances belonging to a network
		 */
		activateAll: function(network)
		{
			if (typeof network === 'string') {
				network = networks[network];
			}
			for (var i = 0; i < instances.length; i++) {
				var instance = instances[i];
				if (instance.init && instance.widget.network === network) {
					socialite.activateInstance(instance);
				}
			}
		},
		/**
		 * Load socialite instances
		 *
		 * @param context - (optional) containing element to search within
		 * @param el      - (optional) individual or an array of elements to load
		 * @param w       - (optional) widget name
		 * @param onload  - (optional) function to call after each socialite instance has loaded
		 * @param process - (optional) process but don't load network (if true)
		 *
		 */
		load: function(context, el, w, onload, process)
		{
			// use document as context if unspecified
			context = (context && typeof context === 'object' && context.nodeType === 1) ? context : document;

			// if no elements search within the context and recurse
			if (!el || typeof el !== 'object') {
				socialite.load(context, socialite.getElements(context, 'socialite'), w, onload, process);
				return;
			}

			var i;

			// if array of elements load each one individually
			if (/Array/.test(Object.prototype.toString.call(el))) {
				for (i = 0; i < el.length; i++) {
					socialite.load(context, el[i], w, onload, process);
				}
				return;
			}

			// nothing was found...
			if (el.nodeType !== 1) {
				return;
			}

			// if widget name not specified search within the element classes
			if (!w || !widgets[w]) {
				w = null;
				var classes = el.className.split(' ');
				for (i = 0; i < classes.length; i++) {
					if (widgets[classes[i]]) {
						w = classes[i];
						break;
					}
				}
				if (!w) {
					return;
				}
			}

			// find or create the Socialite instance
			var instance,
					  widget = widgets[w],
					  sid = parseInt(el.getAttribute('data-socialite'), 10);
			if (!isNaN(sid)) {
				for (i = 0; i < instances.length; i++) {
					if (instances[i].uid === sid) {
						instance = instances[i];
						break;
					}
				}
			} else {
				instance = socialite.createInstance(el, widget);
			}

			// return if just processing (or no instance found)
			if (process || !instance) {
				return;
			}

			// initialise the instance
			if (!instance.init) {
				instance.init = true;
				instance.onload = (typeof onload === 'function') ? onload : null;
				widget.init(instance);
			}

			// append the parent network (all instances will be activated onload)
			// or activate immediately if network has already loaded
			if (!widget.network.appended) {
				socialite.appendNetwork(widget.network);
			} else {
				if (socialite.networkReady(widget.network.name)) {
					socialite.activateInstance(instance);
				}
			}
		},
		/**
		 * Load a single element
		 *
		 * @param el     - an individual element
		 * @param w      - (optional) widget for this socialite instance
		 * @param onload - (optional) function to call once each instance has loaded
		 *
		 */
		activate: function(el, w, onload)
		{
			// skip the first few steps
			window.Socialite.load(null, el, w, onload);
		},
		/**
		 * Process elements to an intermediate state prior to load
		 *
		 * @param context - containing element to search within
		 * @param el      - (optional) individual or an array of elements to load
		 * @param w       - (optional) widget name
		 *
		 */
		process: function(context, el, w)
		{
			// stop before widget initialises instance
			window.Socialite.load(context, el, w, null, true);
		},
		/**
		 * Add a new social network
		 *
		 * @param name   - unique name for network
		 * @param params - additional data and callbacks
		 *
		 */
		network: function(n, params)
		{
			networks[n] = {
				name: n,
				el: null,
				appended: false,
				loaded: false,
				widgets: {}
			};
			if (params) {
				socialite.extendObject(networks[n], params);
			}
		},
		/**
		 * Add a new social widget
		 *
		 * @param name   - name of owner network
		 * @param w      - unique name for widget
		 * @param params - additional data and callbacks
		 *
		 */
		widget: function(n, w, params)
		{
			params.name = n + '-' + w;
			if (!networks[n] || widgets[params.name]) {
				return;
			}
			params.network = networks[n];
			networks[n].widgets[w] = widgets[params.name] = params;
		},
		/**
		 * Change the default Socialite settings for each network
		 */
		setup: function(params)
		{
			socialite.extendObject(socialite.settings, params, true);
		}

	};

	return socialite;

})(window, window.document);

/**
 * Socialite Extensions - Pick 'n' Mix!
 */
(function(window, document, Socialite, undefined)
{

	// default to the Queen's English
	Socialite.setup({
		facebook: {
			lang: 'en_GB',
			appId: null
		},
		twitter: {
			lang: 'en'
		},
		googleplus: {
			lang: 'en-GB'
		}
	});


	// Facebook
	// http://developers.facebook.com/docs/reference/plugins/like/
	// http://developers.facebook.com/docs/reference/javascript/FB.init/

	Socialite.network('facebook', {
		script: {
			src: '//connect.facebook.net/{{language}}/all.js',
			id: 'facebook-jssdk'
		},
		append: function(network)
		{
			var fb = document.createElement('div'),
					settings = Socialite.settings.facebook,
					events = {onlike: 'edge.create', onunlike: 'edge.remove', onsend: 'message.send'};
			fb.id = 'fb-root';
			document.body.appendChild(fb);
			network.script.src = network.script.src.replace('{{language}}', settings.lang);
			window.fbAsyncInit = function() {

				var options = {
					appId: settings.appId,
					xfbml: true
				};

				// use options here to support fb init override for future support
				if (typeof settings.options === 'object') {
					Socialite.extendObject(options, settings.options);
				}

				window.FB.init(options);
				for (var e in events) {
					if (typeof settings[e] === 'function') {
						window.FB.Event.subscribe(events[e], settings[e]);
					}
				}
			};
		}
	});

	Socialite.widget('facebook', 'like', {
		init: function(instance)
		{
			var el = document.createElement('div');
			el.className = 'fb-like';
			Socialite.copyDataAttributes(instance.el, el);
			instance.el.appendChild(el);
			if (window.FB && window.FB.XFBML) {
				window.FB.XFBML.parse(instance.el);
			}
		}
	});

	// https://developers.facebook.com/blog/post/2013/11/06/introducing-new-like-and-share-buttons/
	Socialite.widget('facebook', 'share', {
		init: function(instance)
		{
			var el = document.createElement('div');
			el.className = 'fb-share-button';
			Socialite.copyDataAttributes(instance.el, el);
			instance.el.appendChild(el);
			if (window.FB && window.FB.XFBML) {
				window.FB.XFBML.parse(instance.el);
			}
		}
	});


	// Twitter
	// https://dev.twitter.com/docs/tweet-button/
	// https://dev.twitter.com/docs/intents/events/
	// https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingSocial#twitter

	Socialite.network('twitter', {
		script: {
			src: '//platform.twitter.com/widgets.js',
			id: 'twitter-wjs',
			charset: 'utf-8'
		},
		append: function()
		{
			var notwttr = (typeof window.twttr !== 'object'),
					settings = Socialite.settings.twitter,
					events = ['click', 'tweet', 'retweet', 'favorite', 'follow'];
			if (notwttr) {
				window.twttr = (t = {_e: [], ready: function(f) {
						t._e.push(f);
					}});
			}
			window.twttr.ready(function(twttr)
			{
				for (var i = 0; i < events.length; i++) {
					var e = events[i];
					if (typeof settings['on' + e] === 'function') {
						twttr.events.bind(e, settings['on' + e]);
					}
				}
				Socialite.activateAll('twitter');
			});
			return notwttr;
		}
	});

	var twitterInit = function(instance)
	{
		var el = document.createElement('a');
		el.className = instance.widget.name + '-button';
		Socialite.copyDataAttributes(instance.el, el);
		el.setAttribute('href', instance.el.getAttribute('data-default-href'));
		el.setAttribute('data-lang', instance.el.getAttribute('data-lang') || Socialite.settings.twitter.lang);
		instance.el.appendChild(el);
	};

	var twitterActivate = function(instance)
	{
		if (window.twttr && typeof window.twttr.widgets === 'object' && typeof window.twttr.widgets.load === 'function') {
			window.twttr.widgets.load();
		}
	};

	Socialite.widget('twitter', 'share', {init: twitterInit, activate: twitterActivate});
	Socialite.widget('twitter', 'follow', {init: twitterInit, activate: twitterActivate});
	Socialite.widget('twitter', 'hashtag', {init: twitterInit, activate: twitterActivate});
	Socialite.widget('twitter', 'mention', {init: twitterInit, activate: twitterActivate});

	Socialite.widget('twitter', 'embed', {
		process: function(instance)
		{
			instance.innerEl = instance.el;
			if (!instance.innerEl.getAttribute('data-lang')) {
				instance.innerEl.setAttribute('data-lang', Socialite.settings.twitter.lang);
			}
			instance.el = document.createElement('div');
			instance.el.className = instance.innerEl.className;
			instance.innerEl.className = '';
			instance.innerEl.parentNode.insertBefore(instance.el, instance.innerEl);
			instance.el.appendChild(instance.innerEl);
		},
		init: function(instance)
		{
			instance.innerEl.className = 'twitter-tweet';
		},
		activate: twitterActivate
	});


	// Google+
	// https://developers.google.com/+/plugins/+1button/
	// Google does not support IE7

	Socialite.network('googleplus', {
		script: {
			src: '//apis.google.com/js/plusone.js'
		},
		append: function(network)
		{
			if (window.gapi) {
				return false;
			}
			window.___gcfg = {
				lang: Socialite.settings.googleplus.lang,
				parsetags: 'explicit'
			};
		}
	});

	var googleplusInit = function(instance)
	{
		var el = document.createElement('div');
		el.className = 'g-' + instance.widget.gtype;
		Socialite.copyDataAttributes(instance.el, el);
		instance.el.appendChild(el);
		instance.gplusEl = el;
	};

	var googleplusEvent = function(instance, callback) {
		return (typeof callback !== 'function') ? null : function(data) {
			callback(instance.el, data);
		};
	};

	var googleplusActivate = function(instance)
	{
		var type = instance.widget.gtype;
		if (window.gapi && window.gapi[type]) {
			var settings = Socialite.settings.googleplus,
					  params = Socialite.getDataAttributes(instance.el, true, true),
					  events = ['onstartinteraction', 'onendinteraction', 'callback'];
			for (var i = 0; i < events.length; i++) {
				params[events[i]] = googleplusEvent(instance, settings[events[i]]);
			}
			window.gapi[type].render(instance.gplusEl, params);
		}
	};

	Socialite.widget('googleplus', 'one', {init: googleplusInit, activate: googleplusActivate, gtype: 'plusone'});
	Socialite.widget('googleplus', 'share', {init: googleplusInit, activate: googleplusActivate, gtype: 'plus'});
	Socialite.widget('googleplus', 'badge', {init: googleplusInit, activate: googleplusActivate, gtype: 'plus'});


	// LinkedIn
	// http://developer.linkedin.com/plugins/share-button/

	Socialite.network('linkedin', {
		script: {
			src: '//platform.linkedin.com/in.js'
		}
	});

	var linkedinInit = function(instance)
	{
		var el = document.createElement('script');
		el.type = 'IN/' + instance.widget.intype;
		Socialite.copyDataAttributes(instance.el, el);
		instance.el.appendChild(el);
		if (typeof window.IN === 'object' && typeof window.IN.parse === 'function') {
			window.IN.parse(instance.el);
			Socialite.activateInstance(instance);
		}
	};

	Socialite.widget('linkedin', 'share', {init: linkedinInit, intype: 'Share'});
	Socialite.widget('linkedin', 'recommend', {init: linkedinInit, intype: 'RecommendProduct'});
	Socialite.widget('linkedin', 'follow', {init: linkedinInit, intype: 'FollowCompany'});

})(window, window.document, window.Socialite);

/**
 * Execute any queued functions (don't enqueue before the document has loaded!)
 */
(function() {
	var s = window._socialite;
	if (/Array/.test(Object.prototype.toString.call(s))) {
		for (var i = 0, len = s.length; i < len; i++) {
			if (typeof s[i] === 'function') {
				s[i]();
			}
		}
	}
})();
;
/*!
 * Socialite Plugin
 * Copyright (c) 2013 PMC
 * Author: PMC, Hau Vong
 */

jQuery(function(){
	if ( typeof Socialite === 'undefined' || typeof jQuery.fn.waypoint !== 'function' ) {
		return;
	}

	if ( typeof window._socialite_settings === 'object' ) {
		Socialite.setup( window._socialite_settings );
	}


	jQuery(".social").waypoint(function() {
			Socialite.load(this);
		},
		{
			offset: '150%',
			triggerOnce: true
		});
});

if ( typeof Socialite === 'object' ) {

	Socialite.network('pinterest',{
		script: {
			src: '//assets.pinterest.com/js/pinit.js',
			id:  'pinterest-js'
		}
	});


	Socialite.widget('pinterest','pin-it',{
		init: function(instance) {
			var params = '';
			if ( jQuery(instance.el).attr('data-media') ) {
				params += "&media=" + encodeURIComponent(jQuery(instance.el).attr('data-media'));
			}
			if ( jQuery(instance.el).attr('data-description') ) {
				params += "&description=" + encodeURIComponent(jQuery(instance.el).attr('data-description'));
			}
			var el = jQuery('<a class="pin-it-button"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a>')
				.attr('href','http://pinterest.com/pin/create/button/?url='+ encodeURIComponent(jQuery(instance.el).attr('data-href')) + params);

			jQuery(jQuery(instance.el).prop('attributes')).each(function(){
				if ( /^data-pin/.test(this.name) ) {
					jQuery(el).attr(this.name,this.value);
				}
			});
			jQuery(instance.el).append(el);

			if ( typeof Socialite.settings.pinterest != 'undefined' ) {
				var settings = Socialite.settings.pinterest;
				if ( typeof settings.onclick == 'function' ) {
					jQuery(el).on('click', settings.onclick );
					jQuery(jQuery(instance.el)).on('click','a',settings.onclick);
				}
			}
		}

	});

};

window.pmc_sticky_rightrail = {

    scrollHeight : 1000,
    is_initialized : true,
    $window : jQuery( window ),
    $rightrail : '',
    $content : '',
    $leftrail : '',
    $pmcGallery : '',
    docHeight : '',
    rightrailTop : '',
    contentTop : '',
    scrollLimit : '',
    headerHeight: '',

    init : function( settings ) {
        if( typeof settings.rightrail != 'undefined' ){
            this.$rightrail = jQuery( settings.rightrail );
        }else{
            this.is_initialized = false;
            return;
        }
        if( typeof settings.content != 'undefined' ){
            this.$content = jQuery( settings.content );
        }else{
            this.is_initialized = false;
            return;
        }
        if( typeof settings.leftrail != 'undefined' ){
            this.$leftrail = jQuery( settings.leftrail );
        }else{
            this.is_initialized = false;
            return;
        }
        if( typeof settings.pmcGallery != 'undefined' ){
            this.$pmcGallery = jQuery( settings.pmcGallery );
        }else{
            this.$pmcGallery = jQuery('#pmc-gallery');
        }
        if( typeof settings.headerHeight != 'undefined' ){
            this.headerHeight = settings.headerHeight;
        }
        this.docHeight = this.$window.height();
        if( typeof this.$rightrail.offset() == 'undefined' || typeof this.$content.offset() == "undefined" ){
            this.is_initialized = false;
        }else{
            this.rightrailTop = this.$rightrail.offset().top;
            this.contentTop = this.$content.offset().top;
            this.scrollLimit = this.contentTop + this.scrollHeight;
            this.is_initialized = true;
        }


    },
    should_scroll : function(){

        var rightrailHeight = this.$rightrail.outerHeight();
        var leftRailHeight = this.$leftrail.outerHeight();
        var is_scroll = true;

        if(this.$pmcGallery.length > 0 ) {
            is_scroll = false;
            return is_scroll;
        }
        if (leftRailHeight < rightrailHeight) {
            is_scroll = false;
        } else if (leftRailHeight < rightrailHeight + this.scrollHeight  && leftRailHeight > rightrailHeight) {
            var scrollDiff = leftRailHeight - rightrailHeight;
            if (scrollDiff < 500) {
                is_scroll = false;
            }
            else if (500 < scrollDiff && scrollDiff < 1000) {
                is_scroll = true;
                this.scrollHeight = 500;
                this.scrollLimit = this.contentTop + this.scrollHeight;
            } else {
                is_scroll = true;
                this.scrollHeight = 1000;
                this.scrollLimit = this.contentTop + this.scrollHeight;
            }
        } else {
            is_scroll = true;
            this.scrollHeight = 1000;
            this.scrollLimit = this.contentTop + this.scrollHeight;
        }
        return is_scroll;
    },

    /**
     *
     * @param settings : {rightrail, content, leftrail }
     * if settings does not have rightrail, content and leftrail we don't proceed
     * with the rest of the plugin.
     */
    apply_sticky_rightrail : function( settings ){

        this.init( settings );

        if( !this.is_initialized ){
            return;
        }
        jQuery(window).scroll(function () {

            var $window = jQuery(window);

            var docViewTop = $window.scrollTop();

            var scrollHeight = window.pmc_sticky_rightrail.scrollHeight;


            // Calculate the rightrail top position after scrolling 20px
            // since there can be expandable billboard ad loading after DOM ready
            // and the top position of the might increase after DOM ready
            if ( docViewTop <= 20 ) {
                window.pmc_sticky_rightrail.rightrailTop = window.pmc_sticky_rightrail.$rightrail.offset().top;
                window.pmc_sticky_rightrail.is_scroll = window.pmc_sticky_rightrail.should_scroll();
            }

            if ( !window.pmc_sticky_rightrail.is_scroll ) {
                window.pmc_sticky_rightrail.$rightrail.removeClass('sticky-start');
                window.pmc_sticky_rightrail.$rightrail.removeClass('sticky-end-oneT');
                window.pmc_sticky_rightrail.$rightrail.removeClass('sticky-end-fiveH');
                return false;
            }
            // LOBs with sticky header need a little padding from the docviewtop.
            if( window.pmc_sticky_rightrail.headerHeight != ''){
                docViewTop = docViewTop + window.pmc_sticky_rightrail.headerHeight ;
                scrollHeight = scrollHeight + window.pmc_sticky_rightrail.headerHeight ;
            }
            // When Header is scrolled out of view
            // and we see only the content on the page
            // make the right rail sticky for the next 1000px
            if ( (docViewTop) >= (window.pmc_sticky_rightrail.rightrailTop ) && docViewTop <= window.pmc_sticky_rightrail.scrollLimit ) {
                window.pmc_sticky_rightrail.$rightrail.removeClass( 'sticky-end-oneT' );
                window.pmc_sticky_rightrail.$rightrail.removeClass( 'sticky-end-fiveH' );
                window.pmc_sticky_rightrail.$rightrail.addClass( 'sticky-start' );

            } else if ( window.pmc_sticky_rightrail.$rightrail.hasClass( 'sticky-start' ) ) {
                window.pmc_sticky_rightrail.$rightrail.removeClass( 'sticky-start' );
                if ( 1000 === scrollHeight ) {
                    window.pmc_sticky_rightrail.$rightrail.addClass( 'sticky-end-oneT' );
                } else {
                    window.pmc_sticky_rightrail.$rightrail.addClass( 'sticky-end-fiveH' );
                }

            }

            // Remove Sticky class when the user scrolls back to top
            if ( ( docViewTop ) <= window.pmc_sticky_rightrail.rightrailTop) {
                window.pmc_sticky_rightrail.$rightrail.removeClass('sticky-start');
                window.pmc_sticky_rightrail.$rightrail.removeClass('sticky-end-oneT');
                window.pmc_sticky_rightrail.$rightrail.removeClass('sticky-end-fiveH');
            }

        });
    }


}

;
/*
 * Thickbox 3.1 - One Box To Rule Them All.
 * By Cody Lindley (http://www.codylindley.com)
 * Copyright (c) 2007 cody lindley
 * Licensed under the MIT License: http://www.opensource.org/licenses/mit-license.php
*/

if ( typeof tb_pathToImage != 'string' ) {
	var tb_pathToImage = thickboxL10n.loadingAnimation;
}

/*!!!!!!!!!!!!!!!!! edit below this line at your own risk !!!!!!!!!!!!!!!!!!!!!!!*/

//on page load call tb_init
jQuery(document).ready(function(){
	tb_init('a.thickbox, area.thickbox, input.thickbox');//pass where to apply thickbox
	imgLoader = new Image();// preload image
	imgLoader.src = tb_pathToImage;
});

/*
 * Add thickbox to href & area elements that have a class of .thickbox.
 * Remove the loading indicator when content in an iframe has loaded.
 */
function tb_init(domChunk){
	jQuery( 'body' )
		.on( 'click', domChunk, tb_click )
		.on( 'thickbox:iframe:loaded', function() {
			jQuery( '#TB_window' ).removeClass( 'thickbox-loading' );
		});
}

function tb_click(){
	var t = this.title || this.name || null;
	var a = this.href || this.alt;
	var g = this.rel || false;
	tb_show(t,a,g);
	this.blur();
	return false;
}

function tb_show(caption, url, imageGroup) {//function called when the user clicks on a thickbox link

	try {
		if (typeof document.body.style.maxHeight === "undefined") {//if IE 6
			jQuery("body","html").css({height: "100%", width: "100%"});
			jQuery("html").css("overflow","hidden");
			if (document.getElementById("TB_HideSelect") === null) {//iframe to hide select elements in ie6
				jQuery("body").append("<iframe id='TB_HideSelect'>"+thickboxL10n.noiframes+"</iframe><div id='TB_overlay'></div><div id='TB_window' class='thickbox-loading'></div>");
				jQuery("#TB_overlay").click(tb_remove);
			}
		}else{//all others
			if(document.getElementById("TB_overlay") === null){
				jQuery("body").append("<div id='TB_overlay'></div><div id='TB_window' class='thickbox-loading'></div>");
				jQuery("#TB_overlay").click(tb_remove);
				jQuery( 'body' ).addClass( 'modal-open' );
			}
		}

		if(tb_detectMacXFF()){
			jQuery("#TB_overlay").addClass("TB_overlayMacFFBGHack");//use png overlay so hide flash
		}else{
			jQuery("#TB_overlay").addClass("TB_overlayBG");//use background and opacity
		}

		if(caption===null){caption="";}
		jQuery("body").append("<div id='TB_load'><img src='"+imgLoader.src+"' width='208' /></div>");//add loader to the page
		jQuery('#TB_load').show();//show loader

		var baseURL;
	   if(url.indexOf("?")!==-1){ //ff there is a query string involved
			baseURL = url.substr(0, url.indexOf("?"));
	   }else{
	   		baseURL = url;
	   }

	   var urlString = /\.jpg$|\.jpeg$|\.png$|\.gif$|\.bmp$/;
	   var urlType = baseURL.toLowerCase().match(urlString);

		if(urlType == '.jpg' || urlType == '.jpeg' || urlType == '.png' || urlType == '.gif' || urlType == '.bmp'){//code to show images

			TB_PrevCaption = "";
			TB_PrevURL = "";
			TB_PrevHTML = "";
			TB_NextCaption = "";
			TB_NextURL = "";
			TB_NextHTML = "";
			TB_imageCount = "";
			TB_FoundURL = false;
			if(imageGroup){
				TB_TempArray = jQuery("a[rel="+imageGroup+"]").get();
				for (TB_Counter = 0; ((TB_Counter < TB_TempArray.length) && (TB_NextHTML === "")); TB_Counter++) {
					var urlTypeTemp = TB_TempArray[TB_Counter].href.toLowerCase().match(urlString);
						if (!(TB_TempArray[TB_Counter].href == url)) {
							if (TB_FoundURL) {
								TB_NextCaption = TB_TempArray[TB_Counter].title;
								TB_NextURL = TB_TempArray[TB_Counter].href;
								TB_NextHTML = "<span id='TB_next'>&nbsp;&nbsp;<a href='#'>"+thickboxL10n.next+"</a></span>";
							} else {
								TB_PrevCaption = TB_TempArray[TB_Counter].title;
								TB_PrevURL = TB_TempArray[TB_Counter].href;
								TB_PrevHTML = "<span id='TB_prev'>&nbsp;&nbsp;<a href='#'>"+thickboxL10n.prev+"</a></span>";
							}
						} else {
							TB_FoundURL = true;
							TB_imageCount = thickboxL10n.image + ' ' + (TB_Counter + 1) + ' ' + thickboxL10n.of + ' ' + (TB_TempArray.length);
						}
				}
			}

			imgPreloader = new Image();
			imgPreloader.onload = function(){
			imgPreloader.onload = null;

			// Resizing large images - original by Christian Montoya edited by me.
			var pagesize = tb_getPageSize();
			var x = pagesize[0] - 150;
			var y = pagesize[1] - 150;
			var imageWidth = imgPreloader.width;
			var imageHeight = imgPreloader.height;
			if (imageWidth > x) {
				imageHeight = imageHeight * (x / imageWidth);
				imageWidth = x;
				if (imageHeight > y) {
					imageWidth = imageWidth * (y / imageHeight);
					imageHeight = y;
				}
			} else if (imageHeight > y) {
				imageWidth = imageWidth * (y / imageHeight);
				imageHeight = y;
				if (imageWidth > x) {
					imageHeight = imageHeight * (x / imageWidth);
					imageWidth = x;
				}
			}
			// End Resizing

			TB_WIDTH = imageWidth + 30;
			TB_HEIGHT = imageHeight + 60;
			jQuery("#TB_window").append("<a href='' id='TB_ImageOff'><span class='screen-reader-text'>"+thickboxL10n.close+"</span><img id='TB_Image' src='"+url+"' width='"+imageWidth+"' height='"+imageHeight+"' alt='"+caption+"'/></a>" + "<div id='TB_caption'>"+caption+"<div id='TB_secondLine'>" + TB_imageCount + TB_PrevHTML + TB_NextHTML + "</div></div><div id='TB_closeWindow'><a href='#' id='TB_closeWindowButton'><span class='screen-reader-text'>"+thickboxL10n.close+"</span><div class='tb-close-icon'></div></a></div>");

			jQuery("#TB_closeWindowButton").click(tb_remove);

			if (!(TB_PrevHTML === "")) {
				function goPrev(){
					if(jQuery(document).unbind("click",goPrev)){jQuery(document).unbind("click",goPrev);}
					jQuery("#TB_window").remove();
					jQuery("body").append("<div id='TB_window'></div>");
					tb_show(TB_PrevCaption, TB_PrevURL, imageGroup);
					return false;
				}
				jQuery("#TB_prev").click(goPrev);
			}

			if (!(TB_NextHTML === "")) {
				function goNext(){
					jQuery("#TB_window").remove();
					jQuery("body").append("<div id='TB_window'></div>");
					tb_show(TB_NextCaption, TB_NextURL, imageGroup);
					return false;
				}
				jQuery("#TB_next").click(goNext);

			}

			jQuery(document).bind('keydown.thickbox', function(e){
				if ( e.which == 27 ){ // close
					tb_remove();

				} else if ( e.which == 190 ){ // display previous image
					if(!(TB_NextHTML == "")){
						jQuery(document).unbind('thickbox');
						goNext();
					}
				} else if ( e.which == 188 ){ // display next image
					if(!(TB_PrevHTML == "")){
						jQuery(document).unbind('thickbox');
						goPrev();
					}
				}
				return false;
			});

			tb_position();
			jQuery("#TB_load").remove();
			jQuery("#TB_ImageOff").click(tb_remove);
			jQuery("#TB_window").css({'visibility':'visible'}); //for safari using css instead of show
			};

			imgPreloader.src = url;
		}else{//code to show html

			var queryString = url.replace(/^[^\?]+\??/,'');
			var params = tb_parseQuery( queryString );

			TB_WIDTH = (params['width']*1) + 30 || 630; //defaults to 630 if no parameters were added to URL
			TB_HEIGHT = (params['height']*1) + 40 || 440; //defaults to 440 if no parameters were added to URL
			ajaxContentW = TB_WIDTH - 30;
			ajaxContentH = TB_HEIGHT - 45;

			if(url.indexOf('TB_iframe') != -1){// either iframe or ajax window
					urlNoQuery = url.split('TB_');
					jQuery("#TB_iframeContent").remove();
					if(params['modal'] != "true"){//iframe no modal
						jQuery("#TB_window").append("<div id='TB_title'><div id='TB_ajaxWindowTitle'>"+caption+"</div><div id='TB_closeAjaxWindow'><a href='#' id='TB_closeWindowButton'><span class='screen-reader-text'>"+thickboxL10n.close+"</span><div class='tb-close-icon'></div></a></div></div><iframe frameborder='0' hspace='0' allowTransparency='true' src='"+urlNoQuery[0]+"' id='TB_iframeContent' name='TB_iframeContent"+Math.round(Math.random()*1000)+"' onload='tb_showIframe()' style='width:"+(ajaxContentW + 29)+"px;height:"+(ajaxContentH + 17)+"px;' >"+thickboxL10n.noiframes+"</iframe>");
					}else{//iframe modal
					jQuery("#TB_overlay").unbind();
						jQuery("#TB_window").append("<iframe frameborder='0' hspace='0' allowTransparency='true' src='"+urlNoQuery[0]+"' id='TB_iframeContent' name='TB_iframeContent"+Math.round(Math.random()*1000)+"' onload='tb_showIframe()' style='width:"+(ajaxContentW + 29)+"px;height:"+(ajaxContentH + 17)+"px;'>"+thickboxL10n.noiframes+"</iframe>");
					}
			}else{// not an iframe, ajax
					if(jQuery("#TB_window").css("visibility") != "visible"){
						if(params['modal'] != "true"){//ajax no modal
						jQuery("#TB_window").append("<div id='TB_title'><div id='TB_ajaxWindowTitle'>"+caption+"</div><div id='TB_closeAjaxWindow'><a href='#' id='TB_closeWindowButton'><div class='tb-close-icon'></div></a></div></div><div id='TB_ajaxContent' style='width:"+ajaxContentW+"px;height:"+ajaxContentH+"px'></div>");
						}else{//ajax modal
						jQuery("#TB_overlay").unbind();
						jQuery("#TB_window").append("<div id='TB_ajaxContent' class='TB_modal' style='width:"+ajaxContentW+"px;height:"+ajaxContentH+"px;'></div>");
						}
					}else{//this means the window is already up, we are just loading new content via ajax
						jQuery("#TB_ajaxContent")[0].style.width = ajaxContentW +"px";
						jQuery("#TB_ajaxContent")[0].style.height = ajaxContentH +"px";
						jQuery("#TB_ajaxContent")[0].scrollTop = 0;
						jQuery("#TB_ajaxWindowTitle").html(caption);
					}
			}

			jQuery("#TB_closeWindowButton").click(tb_remove);

				if(url.indexOf('TB_inline') != -1){
					jQuery("#TB_ajaxContent").append(jQuery('#' + params['inlineId']).children());
					jQuery("#TB_window").bind('tb_unload', function () {
						jQuery('#' + params['inlineId']).append( jQuery("#TB_ajaxContent").children() ); // move elements back when you're finished
					});
					tb_position();
					jQuery("#TB_load").remove();
					jQuery("#TB_window").css({'visibility':'visible'});
				}else if(url.indexOf('TB_iframe') != -1){
					tb_position();
					jQuery("#TB_load").remove();
					jQuery("#TB_window").css({'visibility':'visible'});
				}else{
					var load_url = url;
					load_url += -1 === url.indexOf('?') ? '?' : '&';
					jQuery("#TB_ajaxContent").load(load_url += "random=" + (new Date().getTime()),function(){//to do a post change this load method
						tb_position();
						jQuery("#TB_load").remove();
						tb_init("#TB_ajaxContent a.thickbox");
						jQuery("#TB_window").css({'visibility':'visible'});
					});
				}

		}

		if(!params['modal']){
			jQuery(document).bind('keydown.thickbox', function(e){
				if ( e.which == 27 ){ // close
					tb_remove();
					return false;
				}
			});
		}

	} catch(e) {
		//nothing here
	}
}

//helper functions below
function tb_showIframe(){
	jQuery("#TB_load").remove();
	jQuery("#TB_window").css({'visibility':'visible'}).trigger( 'thickbox:iframe:loaded' );
}

function tb_remove() {
 	jQuery("#TB_imageOff").unbind("click");
	jQuery("#TB_closeWindowButton").unbind("click");
	jQuery("#TB_window").fadeOut("fast",function(){jQuery('#TB_window,#TB_overlay,#TB_HideSelect').trigger("tb_unload").unbind().remove();});
	jQuery( 'body' ).removeClass( 'modal-open' );
	jQuery("#TB_load").remove();
	if (typeof document.body.style.maxHeight == "undefined") {//if IE 6
		jQuery("body","html").css({height: "auto", width: "auto"});
		jQuery("html").css("overflow","");
	}
	jQuery(document).unbind('.thickbox');
	return false;
}

function tb_position() {
var isIE6 = typeof document.body.style.maxHeight === "undefined";
jQuery("#TB_window").css({marginLeft: '-' + parseInt((TB_WIDTH / 2),10) + 'px', width: TB_WIDTH + 'px'});
	if ( ! isIE6 ) { // take away IE6
		jQuery("#TB_window").css({marginTop: '-' + parseInt((TB_HEIGHT / 2),10) + 'px'});
	}
}

function tb_parseQuery ( query ) {
   var Params = {};
   if ( ! query ) {return Params;}// return empty object
   var Pairs = query.split(/[;&]/);
   for ( var i = 0; i < Pairs.length; i++ ) {
      var KeyVal = Pairs[i].split('=');
      if ( ! KeyVal || KeyVal.length != 2 ) {continue;}
      var key = unescape( KeyVal[0] );
      var val = unescape( KeyVal[1] );
      val = val.replace(/\+/g, ' ');
      Params[key] = val;
   }
   return Params;
}

function tb_getPageSize(){
	var de = document.documentElement;
	var w = window.innerWidth || self.innerWidth || (de&&de.clientWidth) || document.body.clientWidth;
	var h = window.innerHeight || self.innerHeight || (de&&de.clientHeight) || document.body.clientHeight;
	arrayPageSize = [w,h];
	return arrayPageSize;
}

function tb_detectMacXFF() {
  var userAgent = navigator.userAgent.toLowerCase();
  if (userAgent.indexOf('mac') != -1 && userAgent.indexOf('firefox')!=-1) {
    return true;
  }
}
;
(function() {
	var ajaxurl = window.ajaxurl || '/wp-admin/admin-ajax.php',
		data = window.wpcomVipAnalytics,
		dataQs, percent;

	if ( typeof XMLHttpRequest === 'undefined' ) {
		return;
	}

	if ( ! data ) {
		return;
	}

	percent = ~~data.percentToTrack;
	if ( percent && percent < 100 && ( ~~( ( Math.random() * 100 ) + 1 ) > percent ) ) {
		return;
	}

	dataQs = 'action=wpcom_vip_analytics';

	for ( var key in data ) {
		if ( key === 'percentToTrack' ) {
			continue;
		}
		if ( data.hasOwnProperty( key ) ) {
			dataQs += '&' +
				encodeURIComponent( key ).replace(/%20/g, '+' ) + '=' +
				encodeURIComponent( data[key] ).replace(/%20/g, '+' );
		}
	}

	function sendInfo() {
		var xhr = new XMLHttpRequest();
		xhr.open( 'POST', ajaxurl, true );
		xhr.setRequestHeader( 'Content-type', 'application/x-www-form-urlencoded' );
		xhr.send( dataQs );
	}

	// Delay for some time after the document is ready to ping
	function docReady() {
		setTimeout( function() {
			sendInfo();
		}, 1500 );
	}

	if ( document.readyState === 'complete' ) {
		docReady.apply();
	}
	else if ( document.addEventListener ) {
		document.addEventListener( 'DOMContentLoaded', docReady, false );
	}
	else if ( document.attachEvent ) {
		document.attachEvent( 'onreadystatechange', docReady );
	}
})();
;
function pmc_render_cse_v2() {
	//Search form on header

	jQuery(".cse-search-form").each(
		function () {
			google.search.cse.element.render(
				{
					div: jQuery(this).get(0),
					tag: 'searchbox-only',
					attributes: {
						resultsUrl: _pmc_google_site_search_url, queryParameterName: "q"
					}
				});
		}
	)

	jQuery(".cse-results").each(
		function () {
			//Search result div
			google.search.cse.element.render(
				{
					div: jQuery(this).get(0),
					tag: 'searchresults-only'
				});
		}
	)
	//Provide callback function to manipulate searchbox onload
	try {

		if (typeof pmc_google_custom_search_onload === 'function') {
			pmc_google_custom_search_onload();
		}

	} catch (er) {
	}
}

/*
 explicit: Components are rendered only with explicit calls to google.search.cse.element.render() or google.search.cse.element.go(). Used together with the callback parameter.

 onload (default): All CSE components inside the page's body tag are automatically rendered after the page loads.
 */
window.__gcse = {
	parsetags: 'explicit',
	callback: function () {
		if (document.readyState == 'complete') {
			// Document is ready when CSE element is initialized.
			// Render an element with both search box and search results in div with id 'test'.
			pmc_render_cse_v2();

		} else {
			// Document is not ready yet, when CSE element is initialized.
			jQuery(document).ready(function () {
			// google.setOnLoadCallback(function () {
				// Render an element with both search box and search results in div with id 'test'.
				pmc_render_cse_v2();
			// }, true);
			});
		}
	}
};

(function () {
	var cx = "";
	if ("undefined" !== typeof _pmc_google_site_search_id) {
		var cx = _pmc_google_site_search_id;
	}
	var gcse = document.createElement('script');
	gcse.type = 'text/javascript';
	gcse.async = true;
	gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
		'//www.google.com/cse/cse.js?cx=' + cx;
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(gcse, s);
})();;
