(function(a){a(document).ready(function(){var d=window;var b=d.history;var c={lock:false,load:function(e,f){if(c.lock){return false}c.lock=true;e=typeof(e)!="undefined"?e:cpage;a.ajax({url:ajaxurl,data:{action:"google-get-comments",postid:gpid,cpage:e},complete:function(){c.lock=false},success:function(h){a("#comments-loading").hide();a("#comments-loaded").html(h).slideDown();if(typeof(f)!="undefined"){var g={cpage:e};if(""==f){history.replaceState(g,d.title,f)}else{history.pushState(g,d.title,f)}}var i=d.location.toString().split("#");if(typeof(i[1])!="undefined"){a("html, body").animate({scrollTop:a("#"+i[1]).offset().top},200)}}})},cpage:function(e){match=/([&?]|\/comment-page-)([0-9]+)/.exec(e);if(match){return match[2]}return false},loading:function(){a("#comments-loaded").hide();a("#comments-loading").show().css("height","500px");a("html, body").animate({scrollTop:a("#comments-loading").offset().top},200)}};c.load(cpage,"",true);if(!!(b&&b.pushState)){a(d).bind("popstate",function(e){var f=e.originalEvent.state;if(f&&typeof(f.cpage)!="undefined"){c.loading();c.load(f.cpage)}});a("body").on("click",'a[href*="/comment-page-"], a[href*="cpage"], #comments .navigation a',function(g){var e=a(this).attr("href");if(e.indexOf(a("link[rel=canonical]").attr("href"))==0&&e.indexOf("#respond")==-1){var f=c.cpage(e);if(f!=cpage){g.preventDefault();c.loading();c.load(f,e);cpage=f}}})}})})(jQuery);;
jQuery(document).ready(function() {
	if ( typeof _gaq === 'undefined' && typeof pmc === 'object' && typeof pmc.tracking === 'object' && typeof pmc.tracking.remove_from_browser_url === 'function' ) {
		pmc.tracking.remove_from_browser_url();
	}
});
;
/**
 * PMC Filters - js library to mimic simple wp add_filter & apply_filters for use on client side javascript
 *
 * To add a filter event:
 * pmc.hooks.add_filter( 'filter-name', function( data, p1, p2, ... ) {
 *   // some code....
 *   return data;
 * } );
 *
 * add_filter( 'filter-name', function( data, p1, p2, ... ) {
 *   // some code....
 *   return data;
 * } );
 *
 * To apply a data value throught a filter:
 * data = pmc.hooks.apply_filters( 'filter-name', data, p1, p2, ... );
 * data = apply_filters( 'filter-name', data, p1, p2, ... );
 *
 * @TODO: should integrate with core wp-hook.js when available
 * @ref: https://core.trac.wordpress.org/ticket/21170
 */

// extending the pmc object
var pmc = pmc || {};
pmc.hooks = pmc.hooks || {
	pmc_filters: [],

	/**
	 * var data = pmc.hooks.apply_filters( 'filter', 'data', 'p1', 'p2', ... );
	 */
	apply_filters: function (/* filter, data, arg1, arg2, ... */) {
		var filter = [].shift.call( arguments );

		if ( ! filter == 'undefined' || typeof arguments[0] == 'undefined' ) {
			return;
		}

		if ( this.pmc_filters[ filter ] ) {
			filters = this.pmc_filters[ filter ];
			for (i = 0; i < filters.length; i++) {
				if ( typeof filters[i].callback == 'function' ) {
					try {
						arguments[0] = filters[i].callback.apply( null, arguments );
					} catch ( e ) {}
				}
			}
		}

		return arguments[0];
	},

	/*
	 *	pmc.hooks.add_filter( 'filter', function ( data, p1, p2, ... ) {
	 *		return data;
	 *	});
	 */
	add_filter: function( filter, callback ) {

		if ( typeof callback != 'function' || typeof filter == '' ) {
			return;
		}

		try {
			if ( typeof this.pmc_filters[ filter ] != 'object' ) {
				this.pmc_filters[ filter ] = [];
			}
			this.pmc_filters[ filter ].push( { filter: filter, callback: callback } );
		} catch ( e ) {}

	}

};

if ( typeof add_filter === 'undefined' ) {
	function add_filter() {
		pmc.hooks.add_filter.apply( pmc.hooks, arguments );
	}
}
if ( typeof apply_filters === 'undefined' ) {
	function apply_filters() {
		return pmc.hooks.apply_filters.apply( pmc.hooks, arguments );
	}
}
;
var pmc_comscore = pmc_comscore || {
	pageview: function( callback ) {
		try {
			if ( typeof jQuery !== 'undefined' && typeof pmc_comscore_options.pageview_candidate_url !== 'undefined' ) {
				jQuery.ajax({
					url: pmc_comscore_options.pageview_candidate_url,
					type: 'GET',
					cache: false
				});
			}
			if ( typeof callback === 'function' ) {
				callback();
			}
		} catch (e) {
		}
	}
};


;
