/* bdex-seller-recreation-food-api-0.4.js
* 
* provides api for registering data with bdex
* 
* auto generated by bdex on 07/27/15 16:28:36 do not modify
* 
* copyright (c) 2014
* 
*/

var bdexSeller = bdexSeller || {} ; 

/*
* Identity service object definition
*/
bdexSeller.service = {
  url : 'https://exchange.bdex.com/bdex/bdexSeller.jsp?',
  bdexPartnerAccountId : -1,
  customerUserId: '',
  campaignId: -1,
  industryId: -1,

  /*
   * Available bdex taxonomy fields
   * 
   * Fields other than these will not be accepted
   */ 
   recreationFoodFields : [  "datasetClass","audienceClass","organicFood" ],     

  /* 
   * Default data variables.  Do not supply default values for customer data since it may indicate data that is not accurate
   */  
  recreationFoodData : {},
  
  /*
   * Required defaults. 
   */
  requiredDefaults : { "bdexPartnerAccountId":-1, "customerUserId":'', "campaignId":-1, "industryId":-1 },
  
  /*
   * sendRecreationFoodData
   * 
   * Validates fields for persona data and then sends them to bdex
   * 
   */
  sendRecreationFoodData : function() {
                return this.sendData(this.campaignId, this.recreationFoodFields, this.recreationFoodData);
  },
 

  /*
   * sendData
   * 
   * Sends data to bdex through CORS request  
   *  
   * Arguments should be: names of valid fields, and the key values { key : value, key2 : value, ... }
   *  
   */
  sendData : function() {
                requestUrl = this.url;
                if (arguments.length<3)
                                return;

                campaignId = arguments[0];
                validkeys = arguments[1];
                keyvalues = arguments[2];   
                
                this.setRequiredDefaults(); // set the default fields if required variables are undefined
                                                
                // don't send the user id yet, just send the hSellerCampaignId
                requestUrl = this.appendParam(requestUrl, 'sellerCampaignId', campaignId, true);
                requestUrl = this.appendParam(requestUrl, 'bdexPartnerAccountId', this.bdexPartnerAccountId, false);
                requestUrl = this.appendParam(requestUrl, 'customerUserId', this.customerUserId, false);
                requestUrl = this.appendParam(requestUrl, 'industryId', this.industryId, false);

                // go through the acceptable fields and append them as url parameters if available
                for (var i = 0; i< validkeys.length; i++) {                   
                                key = validkeys[i];
                                value = keyvalues[key];                                
                                if (value) {
                                                requestUrl = this.appendParam(requestUrl, key, value, false);
                                }
                }   
                
                // Make the actual CORS request asynchronously
                var xhr = this.createCORSRequest('POST', requestUrl, true);
                if (!xhr) {
                                return;
                }

                // Response handlers.
                xhr.onload = function() {
                                // Check for success error code here, tomcat returns well formed html for 404
                                if (xhr.status != 200) {
                                                xhr.onerror();
                                                return;
                                } else {
                                                //            If the user has a callback specified, return the xml            
                                                if (bdexSeller.service.success)
                                                                bdexSeller.service.success(xhr.responseText);
                                }
                };

                xhr.onerror = function() {
                                // If the user has a callback specified, return an error message
                                if (bdexSeller.service.failure)
                                                bdexSeller.service.failure(xhr.status + ":" + xhr.statusText);
                };

                xhr.send();
  },
   
  /**
   *  Assign required defaults if the user has removed these fields
   */
  setRequiredDefaults : function () {
                  if (!this.campaignId)
                                  this.personaCampaignId = this.requiredDefaults["campaignId"];
                  if (!this.bdexPartnerAccountId)
                                  this.bdexPartnerAccountId = this.requiredDefaults["bdexPartnerAccountId"];
                  if (!this.customerUserId)
                                  this.customerUserId = this.requiredDefaults["customerUserId"];
                  if (!this.industryId)
                      this.industryId = this.requiredDefaults["industryId"];
  },
  
 /*
  * appendParam
  * 
  * utility to append request parameters for the key value pairs
  */
  appendParam : function(url, key, param, first) {                              
                if (!first) {
                  url = url.concat('&');
                }

                url = url.concat(key).concat('=').concat(param);

                return url;
  },

/*
* createCORSRequest
* 
 * utility to creates the CORS ajax request
*/
createCORSRequest : function (method, url, async) {
                var xhr = new XMLHttpRequest();
                if ("withCredentials" in xhr) {
                                // XHR for Chrome/Firefox/Opera/Safari.
                                xhr.open(method, url, true);
                } else if (typeof XDomainRequest != "undefined") {
                                // XDomainRequest for IE.
                                xhr = new XDomainRequest();
                                xhr.open(method, url);
                } else {
                                // CORS not supported.
                                xhr = null;
                }

                // true on the credentials
                if (xhr) {
                                xhr.withCredentials = true;
                }

                return xhr;
}
};
